// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLCHS.Entities;

#nullable disable

namespace QLCHS.Migrations
{
    [DbContext(typeof(QLBANSACHContext))]
    [Migration("20240810145045_azureCHS")]
    partial class azureCHS
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QLCHS.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AUTHORS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Banner", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BANNERS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("BillDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Code_pay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VoucherId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("BILLS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PricePercent")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("PublishYear")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BOOKS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Bookdetail", b =>
                {
                    b.Property<string>("BookId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.HasKey("BookId")
                        .HasName("PK__BOOKDETA__3DE0C207252AF59E");

                    b.HasIndex("CategoryId");

                    b.ToTable("BOOKDETAILS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Bookimg", b =>
                {
                    b.Property<string>("BookId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Image0")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId")
                        .HasName("PK__BOOKIMG__3DE0C2077BE38430");

                    b.ToTable("BOOKIMG", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CARTS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CATEGORIES", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("Activated")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("gender");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMERS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ORDERS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Otp", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Otpcode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("OTPCode");

                    b.HasKey("Email")
                        .HasName("PK__OTPs__A9D10535167CAD95");

                    b.ToTable("OTPs", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("NgayCommemt")
                        .HasColumnType("date");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex(new[] { "CustomerId", "BookId" }, "UQ_CUSTOMER_BOOK_REVIEW")
                        .IsUnique();

                    b.ToTable("PRODUCT_REVIEWS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("SUPPLIERS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Role")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Voucher", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DateBegin")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("date");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("money");

                    b.Property<decimal?>("PercentDiscount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VOUCHERS", (string)null);
                });

            modelBuilder.Entity("QLCHS.Entities.Bill", b =>
                {
                    b.HasOne("QLCHS.Entities.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_BILLS_USERS");

                    b.HasOne("QLCHS.Entities.Voucher", "Voucher")
                        .WithMany("Bills")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK_BILLS_VOUCHERS");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("QLCHS.Entities.Book", b =>
                {
                    b.HasOne("QLCHS.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_BOOKS_AUTHORS");

                    b.HasOne("QLCHS.Entities.Supplier", "Supplier")
                        .WithMany("Books")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_BOOKS_SUPPLIERS");

                    b.Navigation("Author");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("QLCHS.Entities.Bookdetail", b =>
                {
                    b.HasOne("QLCHS.Entities.Book", "Book")
                        .WithOne("Bookdetail")
                        .HasForeignKey("QLCHS.Entities.Bookdetail", "BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BOOKDETAILS_BOOKS");

                    b.HasOne("QLCHS.Entities.Category", "Category")
                        .WithMany("Bookdetails")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_BOOKDETAILS_CATEGORIES");

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QLCHS.Entities.Bookimg", b =>
                {
                    b.HasOne("QLCHS.Entities.Book", "Book")
                        .WithOne("Bookimg")
                        .HasForeignKey("QLCHS.Entities.Bookimg", "BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BOOKIMG_BOOKS");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("QLCHS.Entities.Cart", b =>
                {
                    b.HasOne("QLCHS.Entities.Book", "Book")
                        .WithMany("Carts")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_CARTS_BOOKS");

                    b.HasOne("QLCHS.Entities.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CARTS_CUSTOMER");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("QLCHS.Entities.Order", b =>
                {
                    b.HasOne("QLCHS.Entities.Bill", "Bill")
                        .WithMany("Orders")
                        .HasForeignKey("BillId")
                        .IsRequired()
                        .HasConstraintName("FK_BILLS_ORDERS");

                    b.HasOne("QLCHS.Entities.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_ORDER_BOOKS");

                    b.HasOne("QLCHS.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_ORDERS_CUSTOMERS");

                    b.Navigation("Bill");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("QLCHS.Entities.ProductReview", b =>
                {
                    b.HasOne("QLCHS.Entities.Book", "Book")
                        .WithMany("ProductReviews")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_REVIEWS_BOOKS");

                    b.HasOne("QLCHS.Entities.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_REVIEWS_CUSTOMERS");

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("QLCHS.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("QLCHS.Entities.Bill", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("QLCHS.Entities.Book", b =>
                {
                    b.Navigation("Bookdetail");

                    b.Navigation("Bookimg");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("QLCHS.Entities.Category", b =>
                {
                    b.Navigation("Bookdetails");
                });

            modelBuilder.Entity("QLCHS.Entities.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("QLCHS.Entities.Supplier", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("QLCHS.Entities.User", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("QLCHS.Entities.Voucher", b =>
                {
                    b.Navigation("Bills");
                });
#pragma warning restore 612, 618
        }
    }
}
